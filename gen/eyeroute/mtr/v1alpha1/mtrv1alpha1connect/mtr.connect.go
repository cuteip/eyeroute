// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eyeroute/mtr/v1alpha1/mtr.proto

package mtrv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/cuteip/eyeroute/gen/eyeroute/mtr/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MtrServiceName is the fully-qualified name of the MtrService service.
	MtrServiceName = "eyeroute.mtr.v1alpha1.MtrService"
)

// MtrServiceClient is a client for the eyeroute.mtr.v1alpha1.MtrService service.
type MtrServiceClient interface {
	ExecuteMtr(context.Context, *connect_go.Request[v1alpha1.ExecuteMtrRequest]) (*connect_go.Response[v1alpha1.ExecuteMtrResponse], error)
}

// NewMtrServiceClient constructs a client for the eyeroute.mtr.v1alpha1.MtrService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMtrServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MtrServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mtrServiceClient{
		executeMtr: connect_go.NewClient[v1alpha1.ExecuteMtrRequest, v1alpha1.ExecuteMtrResponse](
			httpClient,
			baseURL+"/eyeroute.mtr.v1alpha1.MtrService/ExecuteMtr",
			opts...,
		),
	}
}

// mtrServiceClient implements MtrServiceClient.
type mtrServiceClient struct {
	executeMtr *connect_go.Client[v1alpha1.ExecuteMtrRequest, v1alpha1.ExecuteMtrResponse]
}

// ExecuteMtr calls eyeroute.mtr.v1alpha1.MtrService.ExecuteMtr.
func (c *mtrServiceClient) ExecuteMtr(ctx context.Context, req *connect_go.Request[v1alpha1.ExecuteMtrRequest]) (*connect_go.Response[v1alpha1.ExecuteMtrResponse], error) {
	return c.executeMtr.CallUnary(ctx, req)
}

// MtrServiceHandler is an implementation of the eyeroute.mtr.v1alpha1.MtrService service.
type MtrServiceHandler interface {
	ExecuteMtr(context.Context, *connect_go.Request[v1alpha1.ExecuteMtrRequest]) (*connect_go.Response[v1alpha1.ExecuteMtrResponse], error)
}

// NewMtrServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMtrServiceHandler(svc MtrServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/eyeroute.mtr.v1alpha1.MtrService/ExecuteMtr", connect_go.NewUnaryHandler(
		"/eyeroute.mtr.v1alpha1.MtrService/ExecuteMtr",
		svc.ExecuteMtr,
		opts...,
	))
	return "/eyeroute.mtr.v1alpha1.MtrService/", mux
}

// UnimplementedMtrServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMtrServiceHandler struct{}

func (UnimplementedMtrServiceHandler) ExecuteMtr(context.Context, *connect_go.Request[v1alpha1.ExecuteMtrRequest]) (*connect_go.Response[v1alpha1.ExecuteMtrResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("eyeroute.mtr.v1alpha1.MtrService.ExecuteMtr is not implemented"))
}
