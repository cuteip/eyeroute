// @generated by protoc-gen-es v1.1.1 with parameter "target=ts"
// @generated from file eyeroute/mtr/v1alpha1/mtr.proto (package eyeroute.mtr.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message eyeroute.mtr.v1alpha1.ExecuteMtrRequest
 */
export class ExecuteMtrRequest extends Message<ExecuteMtrRequest> {
  /**
   * 宛先 IP アドレス
   *
   * @generated from field: string ip_address = 1;
   */
  ipAddress = "";

  /**
   * 実行回数
   * mtr の -c, --report-cycles に該当
   *
   * @generated from field: int32 report_cycles = 2;
   */
  reportCycles = 0;

  constructor(data?: PartialMessage<ExecuteMtrRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eyeroute.mtr.v1alpha1.ExecuteMtrRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "report_cycles", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteMtrRequest {
    return new ExecuteMtrRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteMtrRequest {
    return new ExecuteMtrRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteMtrRequest {
    return new ExecuteMtrRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteMtrRequest | PlainMessage<ExecuteMtrRequest> | undefined, b: ExecuteMtrRequest | PlainMessage<ExecuteMtrRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteMtrRequest, a, b);
  }
}

/**
 * @generated from message eyeroute.mtr.v1alpha1.ExecuteMtrResponse
 */
export class ExecuteMtrResponse extends Message<ExecuteMtrResponse> {
  /**
   * @generated from field: repeated eyeroute.mtr.v1alpha1.ReportHub hubs = 1;
   */
  hubs: ReportHub[] = [];

  constructor(data?: PartialMessage<ExecuteMtrResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eyeroute.mtr.v1alpha1.ExecuteMtrResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hubs", kind: "message", T: ReportHub, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteMtrResponse {
    return new ExecuteMtrResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteMtrResponse {
    return new ExecuteMtrResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteMtrResponse {
    return new ExecuteMtrResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteMtrResponse | PlainMessage<ExecuteMtrResponse> | undefined, b: ExecuteMtrResponse | PlainMessage<ExecuteMtrResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteMtrResponse, a, b);
  }
}

/**
 * @generated from message eyeroute.mtr.v1alpha1.ReportHub
 */
export class ReportHub extends Message<ReportHub> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  /**
   * @generated from field: string host = 2;
   */
  host = "";

  /**
   * @generated from field: float loss = 3;
   */
  loss = 0;

  /**
   * @generated from field: int32 sent = 4;
   */
  sent = 0;

  /**
   * @generated from field: float last = 5;
   */
  last = 0;

  /**
   * @generated from field: float avg = 6;
   */
  avg = 0;

  /**
   * @generated from field: float best = 7;
   */
  best = 0;

  /**
   * @generated from field: float worst = 8;
   */
  worst = 0;

  /**
   * @generated from field: float stdev = 9;
   */
  stdev = 0;

  constructor(data?: PartialMessage<ReportHub>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "eyeroute.mtr.v1alpha1.ReportHub";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "loss", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "sent", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "last", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "avg", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "best", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "worst", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 9, name: "stdev", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportHub {
    return new ReportHub().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportHub {
    return new ReportHub().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportHub {
    return new ReportHub().fromJsonString(jsonString, options);
  }

  static equals(a: ReportHub | PlainMessage<ReportHub> | undefined, b: ReportHub | PlainMessage<ReportHub> | undefined): boolean {
    return proto3.util.equals(ReportHub, a, b);
  }
}

